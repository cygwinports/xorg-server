From 2ab6c3c2a811685acb3ef22ecd08981680f586eb Mon Sep 17 00:00:00 2001
From: Jon TURNEY <jon.turney@dronecode.org.uk>
Date: Fri, 19 Jun 2009 21:14:37 +0100
Subject: [PATCH] Cygwin/X: Hint handling fixes

Respect the systems ownership of the clipping region

When the style changes, adjust the window size so the client area remains the same.
Otherwise the window size may change when sizing is reflected from
Windows to X, and some windows are drawn expecting them to be exactly the reqeusted size
(e.g. gmplayer control window)

Signed-off-by: Jon TURNEY <jon.turney@dronecode.org.uk>
---
 hw/xwin/winmultiwindowshape.c   |   14 ++++++++++++++
 hw/xwin/winmultiwindowwndproc.c |   11 +++++++++++
 2 files changed, 25 insertions(+), 0 deletions(-)

diff --git a/hw/xwin/winmultiwindowshape.c b/hw/xwin/winmultiwindowshape.c
index 4400702..2887064 100644
--- a/hw/xwin/winmultiwindowshape.c
+++ b/hw/xwin/winmultiwindowshape.c
@@ -71,6 +71,9 @@ winUpdateRgnMultiWindow (WindowPtr pWin)
 {
   SetWindowRgn (winGetWindowPriv(pWin)->hWnd,
 		winGetWindowPriv(pWin)->hRgn, TRUE);
+
+  /* The system now owns the region specified by the region handle and will delete it when it is no longer needed. */
+  winGetWindowPriv(pWin)->hRgn = NULL;
 }
 
 
@@ -206,3 +209,14 @@ winReshapeMultiWindow (WindowPtr pWin)
   
   return;
 }
+
+void
+winShapeRgnUpdateMultiwindow(HWND hwnd)
+{
+  WindowPtr pWin = GetProp (hwnd, WIN_WINDOW_PROP);
+  if (pWin)
+    {
+      winReshapeMultiWindow(pWin);
+      winUpdateRgnMultiWindow(pWin);
+    }
+}
diff --git a/hw/xwin/winmultiwindowwndproc.c b/hw/xwin/winmultiwindowwndproc.c
index 7f66f86..364cf33 100644
--- a/hw/xwin/winmultiwindowwndproc.c
+++ b/hw/xwin/winmultiwindowwndproc.c
@@ -1016,6 +1016,17 @@ winTopLevelWindowProc (HWND hwnd, UINT message,
       if (wParam == SIZE_MINIMIZED) winReorderWindowsMultiWindow();
       return 0; /* end of WM_SIZE handler */
 
+    case WM_STYLECHANGED:
+      /* when the style changes, adjust the window size so the client area remains the same */
+      {
+	LONG x,y;
+	DrawablePtr pDraw = &pWin->drawable;
+	x =  pDraw->x - wBorderWidth(pWin);
+	y = pDraw->y - wBorderWidth(pWin);
+	winPositionWindowMultiWindow(pWin, x, y);
+      }
+      return 0;
+
     case WM_MOUSEACTIVATE:
 
       /* Check if this window needs to be made active when clicked */
-- 
1.6.4.2

