Hint handling fixes

When a hint removes titlebar/border, the windows clipping region for shape must be updated
Also respect the systems ownership of the clipping region

Don't stop hint processing on _NET_WM_WINDOW_TYPE_DIALOG, it may have other hints
(e.g. BMPx about window)

When the style changes because a hint has been applied, adjust the window size so the client
area remains the same. Otherwise the window size may change when sizing is reflected from 
Windows to X, and some windows are drawn expecting them to be exactly the reqeusted size
(e.g. gmplayer control window)

---
 xserver/hw/xwin/winmultiwindowshape.c   |   14 ++++++++++
 xserver/hw/xwin/winmultiwindowwm.c      |    5 +++
 xserver/hw/xwin/winmultiwindowwndproc.c |   42 ++++++++++++++++++++++++--------
 3 files changed, 50 insertions(+), 11 deletions(-)

Index: xorg-server-1.5.2/xserver/hw/xwin/winmultiwindowshape.c
===================================================================
--- xorg-server-1.5.2.orig/xserver/hw/xwin/winmultiwindowshape.c
+++ xorg-server-1.5.2/xserver/hw/xwin/winmultiwindowshape.c
@@ -73,6 +73,9 @@ winUpdateRgnMultiWindow (WindowPtr pWin)
 {
   SetWindowRgn (winGetWindowPriv(pWin)->hWnd,
 		winGetWindowPriv(pWin)->hRgn, TRUE);
+
+  /* The system now owns the region specified by the region handle and delete it when it is no longer needed. */
+  winGetWindowPriv(pWin)->hRgn = NULL;
 }
 
 
@@ -209,3 +212,14 @@ winReshapeMultiWindow (WindowPtr pWin)
   return;
 }
 #endif
+
+void
+winShapeRgnUpdateMultiwindow(HWND hwnd)
+{
+  WindowPtr pWin = GetProp (hwnd, WIN_WINDOW_PROP);
+  if (pWin)
+    {
+      winReshapeMultiWindow(pWin);
+      winUpdateRgnMultiWindow(pWin);
+    }
+}
Index: xorg-server-1.5.2/xserver/hw/xwin/winmultiwindowwm.c
===================================================================
--- xorg-server-1.5.2.orig/xserver/hw/xwin/winmultiwindowwm.c
+++ xorg-server-1.5.2/xserver/hw/xwin/winmultiwindowwm.c
@@ -1486,12 +1486,13 @@ ApplyHints (Display *pDisplay, Window iW
       {
 	SetWindowLongPtr (hWnd, GWL_STYLE, (GetWindowLongPtr(hWnd, GWL_STYLE) & ~WS_OVERLAPPEDWINDOW) | WS_SIZEBOX);
 	SetWindowPos (hWnd, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_FRAMECHANGED | SWP_NOACTIVATE);
+	/* Recalculate shape clipping region */
+	winShapeRgnUpdateMultiwindow(hWnd);
 	return;
       }
       else if (a == dialogWindow)
       {
 	SetForegroundWindow (hWnd);
-	return;
       }
     }
   }
@@ -1534,6 +1535,8 @@ ApplyHints (Display *pDisplay, Window iW
       {
 	SetWindowLongPtr (hWnd, GWL_STYLE, GetWindowLongPtr(hWnd, GWL_STYLE) & ~WS_OVERLAPPEDWINDOW);
 	SetWindowPos (hWnd, NULL, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE | SWP_FRAMECHANGED | SWP_NOACTIVATE | SWP_NOZORDER);
+	/* Recalculate shape clipping region */
+	winShapeRgnUpdateMultiwindow(hWnd);
 	return;
       }
     }
Index: xorg-server-1.5.2/xserver/hw/xwin/winmultiwindowwndproc.c
===================================================================
--- xorg-server-1.5.2.orig/xserver/hw/xwin/winmultiwindowwndproc.c
+++ xorg-server-1.5.2/xserver/hw/xwin/winmultiwindowwndproc.c
@@ -230,20 +230,31 @@ ValidateSizing (HWND hwnd, WindowPtr pWi
   iWidth = rect->right - rect->left;
   iHeight = rect->bottom - rect->top;
 
-  /* Now remove size of any borders */
-  rcStyle = winOverrideStyle((unsigned long)pWin);
-  iWidth -= 2 * GetSystemMetrics(SM_CXSIZEFRAME);
-  iHeight -= (((rcStyle & STYLE_NOTITLE) ? 0 : GetSystemMetrics(SM_CYCAPTION))
-	      + 2 * GetSystemMetrics(SM_CYSIZEFRAME));
-	      
+  /* Now remove size of any borders and title bar */
+  rcStyle = GetWindowLongPtr(hwnd, GWL_STYLE);
+  if (rcStyle & WS_CAPTION)
+    {
+      iHeight -= GetSystemMetrics(SM_CYCAPTION);
+    }
+  if (rcStyle & WS_SIZEBOX)
+    {
+      iWidth -= 2 * GetSystemMetrics(SM_CXSIZEFRAME);
+      iHeight -= 2 * GetSystemMetrics(SM_CYSIZEFRAME);
+    }
 
   /* Constrain the size to legal values */
   ConstrainSize (sizeHints, &iWidth, &iHeight);
 
-  /* Add back the borders */
-  iWidth += 2 * GetSystemMetrics(SM_CXSIZEFRAME);
-  iHeight += (((rcStyle & STYLE_NOTITLE) ? 0 : GetSystemMetrics(SM_CYCAPTION))
-	      + 2 * GetSystemMetrics(SM_CYSIZEFRAME));
+  /* Add back the size of borders and title bar */
+  if (rcStyle & WS_CAPTION)
+    {
+      iHeight += GetSystemMetrics(SM_CYCAPTION);
+    }
+  if (rcStyle & WS_SIZEBOX)
+    {
+      iWidth += 2 * GetSystemMetrics(SM_CXSIZEFRAME);
+      iHeight += 2 * GetSystemMetrics(SM_CYSIZEFRAME);
+    }
 
   /* Adjust size according to where we're dragging from */
   switch(wParam) {
@@ -1050,6 +1061,17 @@ winTopLevelWindowProc (HWND hwnd, UINT m
       if (wParam == SIZE_MINIMIZED) winReorderWindowsMultiWindow();
       return 0; /* end of WM_SIZE handler */
 
+    case WM_STYLECHANGED:
+      /* when the style changes, adjust the window size so the client area remains the same */
+      {
+	LONG x,y;
+	DrawablePtr pDraw = &pWin->drawable;
+	x =  pDraw->x - wBorderWidth(pWin);
+	y = pDraw->y - wBorderWidth(pWin);
+	winPositionWindowMultiWindow(pWin, x, y);
+      }
+      return 0;
+
     case WM_MOUSEACTIVATE:
 
       /* Check if this window needs to be made active when clicked */
